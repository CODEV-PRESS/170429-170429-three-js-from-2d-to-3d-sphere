/*
* @Author: K2 Digital ( https://k2.digital/ ) [tech@k2.digital]
* @Date:   2017-02-18 18:31:27
* @Last Modified by:   AT
* @Last Modified time: 2017-02-20 10:33:06
*/

window.heartShape = new THREE.Shape(); // From http://blog.burlock.org/html5/130-paths
var x = -25;
var y = -50;
heartShape.moveTo( x + 25, y + 25 );
heartShape.bezierCurveTo( x + 25, y + 25, x + 20, y, x, y );
heartShape.bezierCurveTo( x - 30, y, x - 30, y + 35,x - 30,y + 35 );
heartShape.bezierCurveTo( x - 30, y + 55, x - 10, y + 77, x + 25, y + 95 );
heartShape.bezierCurveTo( x + 60, y + 77, x + 80, y + 55, x + 80, y + 35 );
heartShape.bezierCurveTo( x + 80, y + 35, x + 80, y, x + 50, y );
heartShape.bezierCurveTo( x + 35, y, x + 25, y + 25, x + 25, y + 25 );

window.squareSize = 512;
window.squareShape = new THREE.Shape();
squareShape.moveTo( 0,0 );
squareShape.lineTo( 0, squareSize );
squareShape.lineTo( squareSize, squareSize );
squareShape.lineTo( squareSize, 0 );
squareShape.lineTo( 0, 0 );

function makeSmallGridShape(size){
	// var shape = new THREE.Shape();
	// shape.moveTo( 0,0 );
	// shape.lineTo( 0, size );
	// shape.lineTo( size, size );
	// shape.lineTo( size, 0 );
	// shape.lineTo( 0, 0 );
	// return shape;
	var shape = new THREE.Shape();
	shape.moveTo( -size/2,-size/2 );
	shape.lineTo( -size/2, size/2 );
	shape.lineTo( size/2, size/2 );
	shape.lineTo( size/2, -size/2 );
	shape.lineTo( -size/2, -size/2 );
	return shape;
}

function drawSquare(texture, x1, y1, x2, y2, z, rx, ry, rz, s){
	// Square geometry
	// var geometry = new THREE.Geometry(); 

	// /*
	// 1 (x1, y1) 2 (x2, y1)
	// 0 (x1, y2) 3 (x2, y2)
	//  */

 //    // Set 4 vertices
 //    geometry.vertices.push( new THREE.Vector3( x1, y2, 0 ) );
 //    geometry.vertices.push( new THREE.Vector3( x1, y1, 0 ) );
 //    geometry.vertices.push( new THREE.Vector3( x2, y1, 0 ) );
 //    geometry.vertices.push( new THREE.Vector3( x2, y2, 0 ) );

 //    //push 1 triangle
 //    geometry.faces.push( new THREE.Face3( 0, 1, 2) );

 //    //push another triangle
 //    geometry.faces.push( new THREE.Face3( 0, 3, 2) );
    var geometry = new THREE.PlaneGeometry( 512, 512 );

    var material = new THREE.MeshBasicMaterial({ map: texture, transparent: true });
	var mesh = new THREE.Mesh( geometry, material );
	
	squareMaterial = material;

	mesh.position.set( 0, 0, 0 );
	mesh.rotation.set( rx, ry, rz );
	mesh.scale.set( s, s, s );
	group.add( mesh );
}

function addSquareShape( shape, texture, color, x, y, z, rx, ry, rz, s ) {
	// flat shape with texture
	// note: default UVs generated by ShapeBufferGemoetry are simply the x- and y-coordinates of the vertices
	var geometry = new THREE.ShapeBufferGeometry( shape );
	var material = new THREE.MeshBasicMaterial( { map: texture, transparent: true });
	var mesh = new THREE.Mesh( geometry, material);
	mainImageMesh = mesh;
	mesh.position.set( x, y, z );
	mesh.rotation.set( rx, ry, rz );
	mesh.scale.set( s, s, s );
	group.add( mesh );
}
function addSmallSquare( position, total, shape, texture, color, x, y, z, rx, ry, rz, s ) {
	// flat shape with texture
	// note: default UVs generated by ShapeBufferGemoetry are simply the x- and y-coordinates of the vertices
	var geometry = new THREE.ShapeBufferGeometry( shape );
	var material = new THREE.MeshBasicMaterial( { color: color, opacity: 0, transparent: true, side: THREE.DoubleSide } ) ;
	var mesh = new THREE.Mesh( geometry, material);
	mesh.position.set( x, y, z );
	mesh.rotation.set( rx, ry, rz );
	mesh.scale.set( s, s, s );
	mesh.renderDepth = (position/total);
	// mesh.rotation.order = 'zyx';
	group.add( mesh );
	gridMeshArr.push({
		pos: position,
		mesh: mesh,
		x: x,
		y: y,
		z: z,
		rx: rx,
		ry: ry,
		rz: rz,
		s: s,
		delay: Math.round(Math.random()*100)/100,
		period: (Math.round(Math.random()*100)/200)
	});
}

function addShape(depth, shape, extrudeSettings, color, x, y, z, rx, ry, rz, s ) {
	// flat shape with texture
	// note: default UVs generated by ShapeBufferGemoetry are simply the x- and y-coordinates of the vertices
	// var geometry = new THREE.ShapeBufferGeometry( shape );
	// var mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( { side: THREE.DoubleSide, map: texture } ) );
	// mesh.position.set( x, y, z - 175 );
	// mesh.rotation.set( rx, ry, rz );
	// mesh.scale.set( s, s, s );
	// group.add( mesh );
	// flat shape
	var geometry = new THREE.ShapeBufferGeometry( shape );
	var material = new THREE.MeshPhongMaterial( { color: color, opacity: 0, transparent: true } ) ;
	materialArr.push(material);
	var mesh = new THREE.Mesh( geometry, material);
	meshArr.push({
		pos: depth*24,
		mesh: mesh,
		oldX: x,
		oldY: y,
		oldZ: z,
		oldScale: s,
		rotation: rz
	});
	mesh.position.set( x, y, depth*24 );
	mesh.rotation.set( rx, ry, rz );
	mesh.scale.set( s, s, s );
	mesh.renderDepth = depth;
	group.add( mesh );
}